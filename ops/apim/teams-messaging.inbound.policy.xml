<!--
    IMPORTANT:
    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.
    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.
    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.
    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.
    - To remove a policy, delete the corresponding policy statement from the policy document.
    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.
    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.
    - Policies are applied in the order of their appearance, from the top down.
    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.
-->
<policies>
    <inbound>
        <rewrite-uri template="/" />
        <set-variable name="mappingFromNamedValue" value="{{teams-channel-id-mapping}}" />
        <set-body>@{  
            var inBody = context.Request.Body.As<JObject>();

            var dict = new Dictionary<string, string>();

            string message = inBody.GetValue("message").ToString();

            dict.Add("message",  message);
            dict.Add("mapping", (string)context.Variables["mappingFromNamedValue"] );

            string jsonStr = Newtonsoft.Json.JsonConvert.SerializeObject(dict);

            return jsonStr;
        }</set-body>
        <set-backend-service backend-id="Teams-Channel-Send" />
        <base />
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <base />
    </outbound>
    <on-error>
        <base />
    </on-error>
</policies>